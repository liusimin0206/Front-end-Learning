{"version":3,"sources":["webpack://vueDemo/./vue/proxy.js","webpack://vueDemo/./vue/observerArr.js","webpack://vueDemo/./vue/array.js","webpack://vueDemo/./vue/observer.js","webpack://vueDemo/./vue/config.js","webpack://vueDemo/./vue/reactive.js","webpack://vueDemo/./vue/observe.js","webpack://vueDemo/./vue/init.js","webpack://vueDemo/./vue/index.js","webpack://vueDemo/./src/index.js"],"names":["arr","forEach","item","originArrMethods","Array","prototype","arrMethods","Object","create","Observer","data","isArray","setPrototypeOf","this","walk","method","args","rt","apply","newArr","slice","keys","key","val","defineProperty","get","console","log","set","newVal","initState","vm","$options","call","_data","target","proxy","initData","Vue","options","_init","el","personList","name","age"],"mappings":"mBAYA,MCLA,EALA,SAAqBA,GACnBA,EAAIC,SAASC,IACX,EAAQA,OCDNC,EAAmBC,MAAMC,UACzBC,EAAaC,OAAOC,OAAOL,GCAjC,SAASM,EAASC,GAEZN,MAAMO,QAAQD,IAChBH,OAAOK,eAAeF,EAAMJ,GAC5B,EAAYI,IAEZG,KAAKC,KAAKJ,GCVM,CAClB,OACA,MACA,QACA,UACA,SACA,OACA,WFDUT,SAASc,IACnBT,EAAWS,GAAU,YAAaC,GAEhC,MAAMC,EAAKd,EAAiBY,GAAQG,MAAML,KAAKG,MAC/C,IAAIG,EACJ,OAAQJ,GACN,IAAK,OACL,IAAK,UACHI,EAASH,EACT,MACF,IAAK,SACHG,EAASH,EAAKI,MAAM,GAQxB,OAHID,GACF,EAAYA,GAEPF,MCVXR,EAASJ,UAAUS,KAAO,SAAUJ,GACrBH,OAAOc,KAAKX,GACpBT,SAASqB,IACZ,MAAMC,EAAMb,EAAKY,IEhBrB,SAA4BZ,EAAMY,EAAKC,GAErC,EAAQA,GACRhB,OAAOiB,eAAed,EAAMY,EAAK,CAC/BG,IAAG,KACDC,QAAQC,IAAI,WAAYJ,GACjBA,GAETK,IAAIC,GACFH,QAAQC,IAAI,WAAYE,GACpBA,IAAWN,IAEf,EAAQM,GACRN,EAAMM,MFIR,CAAmBnB,EAAMY,EAAKC,OAIlC,UGjBA,EAJA,SAAiBb,GACf,GAAoB,iBAATA,GAA6B,MAARA,EAChC,OAAO,IAAI,EAASA,ICDtB,SAASoB,EAAUC,GACDA,EAAGC,SAEPtB,MAId,SAAkBqB,GAChB,IAAI,KAAErB,GAASqB,EAAGC,SAClBtB,EAAuB,mBAATA,EAAsBA,EAAKuB,KAAKF,GAAMrB,GAAQ,GAC5DqB,EAAGG,MAAQxB,EACXH,OAAOc,KAAKX,GAAMT,SAASqB,KPd7B,SAAmBS,EAAII,EAAQb,GAC7Bf,OAAOiB,eACLO,EAAIT,EAAK,CACPG,IAAG,IACMM,EAAGI,GAAQb,GAEpBM,IAAIC,GACFE,EAAGI,GAAQb,GAAOO,KOQtBO,CAAUL,EAAI,QAAST,MAGzB,EAAQS,EAAGG,OAXTG,CAASN,GCLb,SAASO,EAAIC,GACX1B,KAAK2B,MAAMD,GAGbD,EAAIjC,UAAUmC,MAAQ,SAAUD,GAEnB1B,KACRmB,SAAWO,EACdT,EAFWjB,OAIb,MCVMkB,EAAK,IDUX,ECTE,CACEU,GAAI,OACJ/B,KAAI,KACK,CACLgC,WAAY,CACV,CACEC,KAAM,WACNC,IAAK,WAOjBlB,QAAQC,IAAII,EAAGW,a","file":"bundle.js","sourcesContent":["function proxyData(vm, target, key) {\r\n  Object.defineProperty(\r\n    vm, key, {\r\n      get() {\r\n        return vm[target][key];\r\n      },\r\n      set(newVal) {\r\n        vm[target][key] = newVal;\r\n      },\r\n    },\r\n  );\r\n}\r\nexport default proxyData;\r\n","import observe from './observe';\r\n\r\nfunction observerArr(arr) {\r\n  arr.forEach((item) => {\r\n    observe(item);\r\n  });\r\n}\r\nexport default observerArr;\r\n","import { ARR_METHODS } from './config';\r\nimport observerArr from './observerArr';\r\n\r\nconst originArrMethods = Array.prototype;\r\nconst arrMethods = Object.create(originArrMethods);\r\n// 装饰者模式，重写原型方法\r\nARR_METHODS.forEach((method) => {\r\n  arrMethods[method] = function (...args) {\r\n    // 先调用原来的方法\r\n    const rt = originArrMethods[method].apply(this.args);\r\n    let newArr;// 用来存储新增的那一项\r\n    switch (method) {\r\n      case 'push':\r\n      case 'unshift':\r\n        newArr = args;\r\n        break;\r\n      case 'splice':\r\n        newArr = args.slice(2);\r\n        break;\r\n      default: break;\r\n    }\r\n    // 如果有新增项，那么需要观察这个新增项\r\n    if (newArr) {\r\n      observerArr(newArr);\r\n    }\r\n    return rt; // 返回调用原来方法得到的结果\r\n  };\r\n});\r\n\r\nexport {\r\n  arrMethods,\r\n};\r\n","import defineReactiveData from './reactive';\r\nimport observerArr from './observerArr';\r\nimport { arrMethods } from './array';\r\n\r\nfunction Observer(data) {\r\n  // 处理数组\r\n  if (Array.isArray(data)) {\r\n    Object.setPrototypeOf(data, arrMethods);\r\n    observerArr(data);\r\n  } else {\r\n    this.walk(data);\r\n  }\r\n}\r\n\r\n// 原型上方法walk\r\nObserver.prototype.walk = function (data) {\r\n  const keys = Object.keys(data);\r\n  keys.forEach((key) => {\r\n    const val = data[key];\r\n    defineReactiveData(data, key, val);\r\n  });\r\n};\r\n\r\nexport default Observer;\r\n","const ARR_METHODS = [\r\n  'push',\r\n  'pop',\r\n  'shift',\r\n  'unshift',\r\n  'splice',\r\n  'sort',\r\n  'reverse'];\r\nexport { ARR_METHODS };\r\n","import observe from './observe';\r\n\r\nfunction defineReactiveData(data, key, val) {\r\n  // 有可能当前val还是一个对象，因此继续观察当前 val\r\n  observe(val);\r\n  Object.defineProperty(data, key, {\r\n    get() {\r\n      console.log('响应式数据-获取', val);\r\n      return val;\r\n    },\r\n    set(newVal) {\r\n      console.log('响应式数据-设置', newVal);\r\n      if (newVal === val) return;\r\n      // 可能更新的这个newVal 还是一个对象或者数组，我们需要再观察一下\r\n      observe(newVal);\r\n      val = newVal;\r\n    },\r\n  });\r\n}\r\nexport default defineReactiveData;\r\n","import Observer from './observer';\r\n\r\nfunction observe(data) {\r\n  if (typeof data !== 'object' || data == null) return;\r\n  return new Observer(data);\r\n}\r\nexport default observe;\r\n","import proxyData from './proxy';\r\nimport observe from './observe';\r\n\r\nfunction initState(vm) {\r\n  const options = vm.$options;\r\n  // 判断 data 是否存在\r\n  if (options.data) {\r\n    initData(vm); // 初始化数据\r\n  }\r\n}\r\nfunction initData(vm) {\r\n  let { data } = vm.$options; // 将 data 挂载到 vm 的 _data 上\r\n  data = typeof data === 'function' ? data.call(vm) : data || {};\r\n  vm._data = data;\r\n  Object.keys(data).forEach((key) => {\r\n    proxyData(vm, '_data', key);\r\n  });\r\n  // 观察 data\r\n  observe(vm._data);\r\n}\r\nexport { initState };\r\n","import { initState } from './init';\r\n\r\nfunction Vue(options) {\r\n  this._init(options);\r\n}\r\n// 初始化\r\nVue.prototype._init = function (options) {\r\n  // 保存实例\r\n  const vm = this;\r\n  vm.$options = options; // 将 options 挂载到实例上\r\n  initState(vm); // 初始化状态\r\n};\r\nexport default Vue;\r\n","import Vue from '../vue';\r\n\r\nconst vm = new Vue(\r\n  {\r\n    el: '#app',\r\n    data() {\r\n      return {\r\n        personList: [\r\n          {\r\n            name: 'liusimin',\r\n            age: '19',\r\n          },\r\n        ],\r\n      };\r\n    },\r\n  },\r\n);\r\nconsole.log(vm.personList);\r\n"],"sourceRoot":""}