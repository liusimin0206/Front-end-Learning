
import '@babel/polyfill'
import Vue from 'vue'
import App from './App.vue'
import router from './router'
import store from './store'
import api from './api'
import Antd, { message } from 'ant-design-vue'
import VueBus from 'vue-bus'
import md5 from 'js-md5'
import _ from 'lodash'
import { getClientUnique, nameMap } from '@/utils/helper'
import { eventCollectMap } from '@/utils/eventCollect'
import MyComponents from '@/utils/register'
import Cookies from 'js-cookie'
import VueClipboard from 'vue-clipboard2'
import VueSocketIO from 'vue-socket.io'
import 'ant-design-vue/dist/antd.css'
import './assets/iconfont/iconfont.css'
import './assets/css/reset.css'
import './assets/css/main.css'

Vue.config.productionTip = false

VueClipboard.config.autoSetContainer = true
Vue.use(Antd)
Vue.use(VueBus)
Vue.use(VueClipboard)
Vue.use(MyComponents)
message.config({
  top: '80px'
})
Vue.prototype.$api = api
Vue.prototype.$md5 = md5
Vue.prototype._=_
Vue.prototype.Cookies = Cookies
Vue.prototype.$localStorage = localStorage
Vue.prototype.$getClientUnique = getClientUnique
const SOCKET_URL = `${process.env.VUE_APP_SOCKETIO_API}`
Vue.use(new VueSocketIO({
  debug: true,
  connection: SOCKET_URL
}))
const id = getClientUnique()
const userInfo = Cookies.getJSON('userInfoAI')
router.beforeEach(async (to, from, next) => {
  next()
  const { params, name } = to
  if (to !== from) {
    api.home.userRecord({
      token: userInfo && userInfo.token,
      userId: userInfo && userInfo.userId,
      mac: id
    })
  }
  if (params && eventCollectMap[params.id] && nameMap.indexOf(name) > -1) {
    api.home.eventCollect({
      token: userInfo && userInfo.token,
      userId: userInfo && userInfo.userId,
      mac: id,
      ...eventCollectMap[params.id]
    })
  } else if (name && eventCollectMap[name]) {
    api.home.eventCollect({
      token: userInfo && userInfo.token,
      userId: userInfo && userInfo.userId,
      mac: id,
      ...eventCollectMap[name]
    })
  }
})
new Vue({
  router,
  store,
  render: h => h(App)
}).$mount('#app')
<template>
  <a-config-provider :locale="locale">
    <div id="app">
      <router-view></router-view>
      <a-modal
        :title='title'
        :visible="visible"
        @ok="handleOk"
        @cancel="handleOk"
      >
        <p>{{ msg }}</p>
        <template slot="footer">
          <div class="login-footer">
            <a-button key="submit" type="primary" @click="handleOk">{{ btnMsg }}</a-button>
          </div>
        </template>
      </a-modal>
      <suspension-frame />
    </div>
  </a-config-provider>
</template>
<script>
import { connectSocket } from '@/utils/connectSocket'
import SuspensionFrame from '@/components/SuspensionFrame'
import zhCN from 'ant-design-vue/lib/locale-provider/zh_CN'
import { mapActions } from 'vuex'
export default {
  data () {
    return {
      locale: zhCN,
      visible: false,
      title: '系统提醒',
      msg: '',
      btnMsg: '确定'
    }
  },
  components: {
    SuspensionFrame
  },
  created () {
    const userInfo = this.Cookies.getJSON('userInfoAI')
    if (userInfo) {
      connectSocket()
      this.getTotalCount('orderCount')
    }
  },
  mounted () {
    this.subscMessage()
    const APP = document.querySelector('#app')
    APP.addEventListener('scroll', () => this.toggleClass(APP.scrollTop))
  },
  beforeDestroy () {
    const APP = document.querySelector('#app')
    APP.removeEventListener('scroll', () => this.toggleClass(APP.scrollTop))
  },
  methods: {
    ...mapActions(['changeUserData', 'changeMessageInfo']),
    toggleClass (scrollTop) {
      const header = document.getElementsByClassName('auto-header')[0]
      if (scrollTop > 0) {
        header && header.classList.add('headerFix')
      } else {
        header && header.classList.remove('headerFix')
      }
    },
    subscMessage () {
      let { listener, subscribe } = this.sockets
      if (listener) {
        subscribe = listener.subscribe
      }
      subscribe('notice', (res) => {
        const { system, operate, data, message } = res
        if (system === 0) {
          if (operate === 10) {
            const messageInfo = JSON.parse(sessionStorage.getItem('message-total')) || {
              messageCount: 0,
              orderCount: 0
            }
            const type = 'orderCount'
            Object.assign(messageInfo, {
              [type]: data
            })
            sessionStorage.setItem('message-total', JSON.stringify(messageInfo))
            this.changeMessageInfo(messageInfo)
          }
        } else if (system === 100) {
            this.type = operate
            this.visible = true
            this.msg = message
          }
        }
      })
    },
    handleOk () {
      this.visible = false
      this.visible = false
      this.Cookies.remove('userInfoAI')
      this.changeUserData(null)
      this.$router.push('/login')
    },
    createOrder () {
      this.orderModalVisible = true
    },
    getTotalCount (type) {
      const api = 'workOrderTotal'
      const messageInfo = JSON.parse(sessionStorage.getItem('message-total')) || {
        messageCount: 0,
        orderCount: 0
      }
      let total = 0
      this.$api.order[api]().then(res => {
        if (res.code === 200) {
          total = res.data
        } else {
          total = 0
        }
      }).catch(() => {
        total = 0
      }).finally(async () => {
        Object.assign(messageInfo, {
          [type]: total
        })
        sessionStorage.setItem('message-total', JSON.stringify(messageInfo))
        await this.changeMessageInfo(messageInfo)
      })
    }
  }

}
</script>
<style lang="less">
# app{
  width: 100%;
  min-width: 1280px;
  overflow: auto;
  /deep/.headerFix{
    background: #000!important;
    span, a{
      color: #fff!important;
    }
  }
}
</style>
<template>
  <div class="contentTxt">
    <h1 class="underline">活体检测</h1>
    <h2>接口描述</h2>
    <p>活体检测 API能够准确地确定识别对象生理特征，辨别人像真伪，返回人脸置信度及真人概率。</p>
    <h2>图片要求</h2>
    <p>1. 图片格式：PNG、JPG、JPEG、BMP</p>
    <p>2. 图片大小：小于4M</p>
    <h2>基本信息</h2>
    <p>
      <i>Path</i>：http://apigw.deepblueai.com/api/aiplatform_web/apiCloud/ability/case/bioassay/recognition
</p>
    <p>
      <i>Method</i>：POST</p>
    <h2>请求参数</h2>
    <p>
      <i>Headers</i>
    </p>
    <a-table :row-key="(r,i)=>{return Math.random()}" :columns="columns" :data-source="data"></a-table>
    <p>
      <i>Body</i>
    </p>
    <a-table :row-key="(r,i)=>{return Math.random()}" :columns="columns1" :data-source="data1"></a-table>
    <h2>返回数据</h2>
    <a-table :defaultExpandAllRows="true" :row-key="(r,i)=>{return Math.random()}" :columns="columns2" :data-source="data2" :pagination={pageSize:20}></a-table>
    <h2>返回报文示例</h2>
    <div class="code">
      <pre>
        {
            "msg": <span class="red">"success"</span>,
            "code": <span class="green">200</span>,
            "data": {
                "result": [
                    {
                        "label": <span class="red">"spoof"</span>,
                        "live_confidence": <span class="green">0.0102</span>,
                        "face_rectangle": {
                            "left": <span class="green">10</span>,
                            "right": <span class="green">100</span>,
                            "top": <span class="green">20</span>,
                            "bottom": <span class="green">200</span>,
                            "score": <span class="green">0.8888</span>,

                        }
                    },
                    {
                        "label": <span class="red">"live"</span>,
                        "live_confidence": <span class="green">0.9102</span>,
                        "face_rectangle": {
                            "left": <span class="green">10</span>,
                            "right": <span class="green">100</span>,
                            "top": <span class="green">20</span>,
                            "bottom": <span class="green">200</span>,
                            "score": <span class="green">0.8888</span>,

                        }
                    }
                ],
                "img": <span class="red">"/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAIBAQEBAQIBAQECAgICAg......"</span>
            }
        }</pre>
    </div>
  </div>

</template>

<script>
export default {
  data () {
    return {
      data: [
        {
          1: 'authorization',
          2: 'Bearer token',
          3: '是',
          4: '认证token'
        },
        {
          1: 'Content-Type',
          2: 'multipart/form-data',
          3: '是',
          4: 'body类型'
        }
      ],
      data1: [
        {
          1: 'image',
          2: 'base64(去掉前缀)',
          3: '是',
          5: 'base64字符串'
        }
      ],
      columns: [
        {
          title: '参数名称',
          dataIndex: '1'
        },
        {
          title: '参数值',
          dataIndex: '2'
        },
        {
          title: '是否必须',
          dataIndex: '3'
        },
        {
          title: '示例',
          dataIndex: '4'
        },
        {
          title: '备注',
          dataIndex: '5'
        }
      ],
      columns1: [
        {
          title: '参数名称',
          dataIndex: '1'
        },
        {
          title: '参数类型',
          dataIndex: '2'
        },
        {
          title: '是否必须',
          dataIndex: '3'
        },
        {
          title: '示例',
          dataIndex: '4'
        },
        {
          title: '备注',
          dataIndex: '5'
        }
      ],
      columns2: [
        {
          title: '返回字段',
          dataIndex: '1',
          width: 200
        },
        {
          title: '字段类型',
          dataIndex: '2'
        },
        {
          title: '字段含义',
          dataIndex: '3'
        }
      ],
      data2: [
        {
          1: 'msg',
          2: 'string',
          3: '结果描述'
        },
        {
          1: 'code',
          2: 'int',
          3: '状态码'
        },
        {
          1: 'data',
          2: 'json',
          3: '返回结果'
        },
        {
          1: 'image',
          2: 'string',
          3: '可视化结果'
        }
      ]
    }
  }
}
</script>

<style lang="less" scoped>
.contentTxt {
  padding: 10px 50px;
  background-color: #fff;
  font-family: Source Han Sans CN;
  color: rgba(56, 56, 56, 1);
  h1 {
    color: #383838;
    font-size: 20px;
    font-weight: bold;
    line-height: 36px;
    background-color: #fff;
    padding: 0 0 10px 0;
  }
  h2 {
    font-size: 18px;
    font-weight: bold;
    line-height: 36px;
    padding: 10px 0 0 0;
  }
  .underline {
    border-bottom: 1px solid #f1f1f1;
  }
  p {
    font-size: 12px;
    line-height: 22px;
    margin: 15px 0;
    span {
      color: #289ffe;
      cursor: pointer;
    }
    i {
      font-weight: bold;
    }
  }
  .code {
    border: 1px solid rgb(239, 241, 242);
    font-size: 12px;
    line-height: 22px;
    background-color: rgb(248, 248, 248);
    margin: 15px 0;
    padding: 10px;
    .green {
      color: #00c957;
    }
    .blue {
      color: #4169e1;
    }
    .red {
      color: #e3170d;
    }
  }
  /deep/.ant-table-pagination.ant-pagination {
    display: none;
  }
}
</style>
<template>
  <div class="contentTxt">
    <h1 class="underline">人脸检测</h1>

    <h2>接口描述</h2>

    <p>人脸检测API能够准确地检测图中的人脸， 快速检测人脸并返回人脸框位置，并输出人脸5个关键点坐标。</p>

    <h2>图片要求</h2>

    <p>1. 图片格式：PNG、JPG、JPEG、BMP</p>
    <p>2. 图片大小：小于4M</p>

    <h2>基本信息</h2>

    <p>
      <i>Path：</i>http://apigw.deepblueai.com/api/aiplatform_web/apiCloud/face/detection</p>

    <p>
      <i>Method：</i> POST</p>

    <h2>请求参数</h2>
    <p>
      <i>Headers</i>
    </p>
    <a-table :row-key="(r,i)=>{return Math.random()}" :columns="columns" :data-source="data"></a-table>

    <p>
      <i>Body</i>
    </p>
    <a-table :row-key="(r,i)=>{return Math.random()}" :columns="columns2" :data-source="data2"></a-table>

    <h2>返回数据</h2>
    <a-table :defaultExpandAllRows="true" :row-key="(r,i)=>{return Math.random()}" :columns="columns3" :data-source="data3" :pagination={pageSize:20}></a-table>

    <h2>返回报文示例</h2>

    <div class="code">
      <pre>
        {
            "code": <span class="green">200</span>,
            "msg": <span class="red">"Successful operation"</span>,
            "data": {
              "result": [
                {
                  "confidence": <span class="red">"0.822"</span>,
                  "rectangle": {
                    "top": <span class="red">"110"</span>,
                    "left": <span class="red">"268"</span>,
                    "bottom": <span class="red">"204"</span>,
                    "right": <span class="red">"340"</span>
                  },
                  "label": <span class="red">"face"</span>,
                  "landmark": {
                    "left_mouth_Y": <span class="red">"180"</span>,
                    "left_mouth_X": <span class="red">"292"</span>,
                    "right_mouth_X": <span class="red">"318"</span>,
                    "right_eye_X": <span class="red">"326"</span>,
                    "right_mouth_Y": <span class="red">"184"</span>,
                    "left_eye_X": <span class="red">"296"</span>,
                    "right_eye_Y": <span class="red">"151"</span>,
                    "left_eye_Y": <span class="red">"147"</span>,
                    "nose_Y": <span class="red">"172"</span>,
                    "nose_X": <span class="red">"314"</span>
                  }
                },
                {
                  "confidence": <span class="red">"0.793"</span>,
                  "rectangle": {
                    "top": <span class="red">"81"</span>,
                    "left": <span class="red">"411"</span>,
                    "bottom": <span class="red">"167"</span>,
                    "right": <span class="red">"478"</span>
                  },
                  "label": <span class="red">"face"</span>,
                  "landmark": {
                    "left_mouth_Y": <span class="red">"144"</span>,
                    "left_mouth_X": <span class="red">"425"</span>,
                    "right_mouth_X": <span class="red">"450"</span>,
                    "right_eye_X": <span class="red">"457"</span>,
                    "right_mouth_Y": <span class="red">"150"</span>,
                    "left_eye_X": <span class="red">"428"</span>,
                    "right_eye_Y": <span class="red">"120"</span>,
                    "left_eye_Y": <span class="red">"113"</span>,
                    "nose_Y": <span class="red">"138"</span>,
                    "nose_X": <span class="red">"437"</span>
                  }
                }
              ],
              "img": <span class="red">"/9j/4AAQSkZJRgABAQAA......"</span>,
              "face_num": <span class="grren">2</span>
            }
          }</pre>
    </div>
  </div>

</template>

<script>
export default {
  data () {
    return {
      data: [
        {
          1: 'authorization',
          2: 'Bearer token',
          3: '是',
          4: '认证token'
        },
        {
          1: 'Content-Type',
          2: 'multipart/form-data',
          3: '是',
          4: 'body类型'
        }
      ],
      data2: [
        {
          1: 'image',
          2: 'base64(去掉前缀)',
          3: '是',
          4: 'base64字符串'
        }
      ],
      columns: [
        {
          title: '参数名称',
          dataIndex: '1'
        },
        {
          title: '参数值',
          dataIndex: '2'
        },
        {
          title: '是否必须',
          dataIndex: '3'
        },
        {
          title: '备注',
          dataIndex: '4'
        }
      ],
      columns2: [
        {
          title: '参数名称',
          dataIndex: '1'
        },
        {
          title: '参数类型',
          dataIndex: '2'
        },
        {
          title: '是否必须',
          dataIndex: '3'
        },
        {
          title: '备注',
          dataIndex: '4'
        }
      ],
      columns3: [
        {
          title: '返回字段',
          dataIndex: '1'
        },
        {
          title: '字段类型',
          dataIndex: '2'
        },
        {
          title: '字段含义',
          dataIndex: '3'
        }
      ],
      data3: [
        {
          1: 'code',
          2: 'Integer',
          3: '状态编码（200成功，30001图片中未找到人, 30002图片中人数过多）'
        },
        {
          1: 'msg',
          2: 'string',
          3: '操作提示'
        },
        {
          1: 'data',
          2: 'jsonObject',
          3: '数据详情',
          children: [{
            1: 'img',
            2: 'string',
            3: '图片base64'
          },
          {
            1: 'face_num',
            2: 'Integer',
            3: '人脸数目'
          },
          {
            1: 'result',
            2: 'jsonArray',
            3: '结果集合',
            children: [{
              1: 'confidence',
              2: 'string',
              3: '置信度'
            },
            {
              1: 'rectangle',
              2: 'jsonObject',
              3: '检测框坐标',
              children: [{
                1: 'top',
                2: 'string',
                3: '左上 y'
              },
              {
                1: 'bottom',
                2: 'string',
                3: '右下 y'
              },
              {
                1: 'left',
                2: 'string',
                3: '左上 x'
              },
              {
                1: 'right',
                2: 'string',
                3: '右下 x'
              }]
            },
            {
              1: 'label',
              2: 'string',
              3: '标签'
            },
            {
              1: 'landmark',
              2: 'string',
              3: '人脸关键点坐标',
              children: [{
                1: 'leyeX',
                2: 'string',
                3: '左眼 x'
              },
              {
                1: 'leyeY',
                2: 'string',
                3: '左眼 y'
              },
              {
                1: 'reyeX',
                2: 'string',
                3: '右眼 x'
              },
              {
                1: 'reyeY',
                2: 'string',
                3: '右眼 y'
              },
              {
                1: 'lmoX',
                2: 'string',
                3: '左嘴角 x'
              },
              {
                1: 'lmoY',
                2: 'string',
                3: '左嘴角 y'
              },
              {
                1: 'rmoX',
                2: 'string',
                3: '右嘴角 x'
              },
              {
                1: 'rmoY',
                2: 'string',
                3: '右嘴角 y'
              },
              {
                1: 'noseX',
                2: 'string',
                3: '鼻尖 x'
              },
              {
                1: 'noseY',
                2: 'string',
                3: '鼻尖 y'
              }]
            }
            ]
          }]
        }

      ]
    }
  }
}
</script>

<style lang="less" scoped>
@import "../document_style.less";
</style>
<template>
  <div class="function-experience">
    <a-row>
      <a-col :span="14">
        <div class="images-list">
          <div class="image-big">
            <Resolution
              v-if="codeId === 118"
              :oldImageUrl="bigImgBlobUrl"
              :newImageUrl="bigImageUrl"
              :newImageWidth="newImageWidth"
              :newImageHeight="newImageHeight"
              ref="resolution"
               >
               <div slot="inputUpload">
                 <img-input
                  @onFileChange="onFileChange"
                  :beforeUpload="beforeUpload"
                  :uploadOption="uploadOption"
                  :eventParams="eventParams"
                  :tips='tips'
                />
               </div>
            </Resolution>
            <div v-else class="image-big-body" :style="{
                'background-image': bigImageUrl?`url(data:image/png;base64,${bigImageUrl})`: (bigImgBlobUrl?`url('${bigImgBlobUrl}')`:'')
              }">
                <img-input
                  @onFileChange="onFileChange"
                  :beforeUpload="beforeUpload"
                  :uploadOption="uploadOption"
                  :eventParams="eventParams"
                  :tips='tips'
                />
            </div>
            <div class='image-feace-nums' v-if='codeId === 2'>
                 {{ `总计：一共检测到${faceNums}张人脸`}}
            </div>
            <div class='image-vivo-detection hat-result' v-else-if='codeId === 23'>
              <div class="green">绿色标注表示判别为活体</div>
              <div class="red">红色标注表示判别为非活体</div>
            </div>
            <div class='image-vivo-detection hat-result' v-else-if='codeId === 24'>
              <div class="green">绿色标注为佩戴头盔</div>
              <div class="red">红色标注为未佩戴头盔</div>
            </div>
            <div class="imgUploading" v-if="imgUploading"></div>
          </div>
          <div class="image-small-list">
            <a-icon class="icon-left" @click="Prev" type="left" />
            <div class="small-outer">
              <div class="small-inner" :style="{ width: `${imagesDataList.length * 123}px`, left: `${smallImageleft}px`}" >
                <div
                  class="image-inner"
                  v-for="(item, index) in imagesDataList"
                  :key="index"
                  @click="clickCurrentIndex(index)"
                  :style="{
                    border:
                      currentIndex === index
                        ? '2px solid #E74445'
                        : '2px solid #969696',
                    'background-image': item.imgUrl?`url('${item.imgUrl}')`: (item.img?`url('${item.img}')`:'')
                  }"
                >
                </div>
              </div>
            </div>
            <a-icon class="icon-left" @click="Next" type="right" />
          </div>
        </div>
      </a-col>

      <a-col :span="10">
        <json-wrap :responseJson="resJson" :loading="imgUploading">
          <div v-if="codeId === 6" slot="responseResult">
            <div class="hat-result">
              <div class="green">绿色框圈中位置为已配戴口罩</div>
              <div class="red">红色框圈中位置为未配戴口罩</div>
            </div>
          </div>
          <div v-else-if="codeId === 8" slot="responseResult">
            <div class="hat-result">
              <div class="green">绿色标注为佩戴安全帽</div>
              <div class="red">红色标注为未佩戴安全帽</div>
            </div>
          </div>
          <div v-else-if="codeId === 9" slot="responseResult">
            <div v-if="currentResult" class="result">{{`车牌号：${currentResult}`}}</div>
          </div>
          <div v-else-if="codeId === 10" slot="responseResult">
            <div class="table-result">
              <span class="title">识别内容</span>
              <span class="title">识别结果</span>
              <span class="title">置信度</span>
            </div>
            <div class="table-result">
              <span>车辆类型</span>
              <span>{{carObj.carType}}</span>
              <span>{{carObj.carTypeConfidence}}</span>
            </div>
            <div class="table-result">
              <span>车身颜色</span>
              <span>{{carColor}}</span>
              <span>{{carObj.colorConfidence}}</span>
            </div>
            <div class="table-result">
              <span>车辆品牌</span>
              <span>{{carObj.brand}}</span>
              <span>{{carObj.brandConfidence}}</span>
            </div>
            <div class="table-result">
              <span>车牌颜色</span>
              <span>{{carObj.licensePlateType}}</span>
              <span>{{carObj.licensePlateTypeConfidence}}</span>
            </div>
            <div class="table-result">
              <span>车牌号码</span>
              <span>{{carObj.licensePlate}}</span>
            </div>
            <div class="table-result">
              <span>主驾遮阳板</span>
              <span>{{carObj.mainShield}}</span>
            </div>
            <div class="table-result">
              <span>副驾遮阳板</span>
              <span>{{carObj.sideShield}}</span>
            </div>
            <div class="table-result">
              <span>年检标数量</span>
              <span>{{carObj.annualMark}}</span>
            </div>
            <div class="table-result">
              <span>纸巾盒数量</span>
              <span>{{carObj.tissueBox}}</span>
            </div>
            <div class="table-result">
              <span>挂坠物数量</span>
              <span>{{carObj.hangings}}</span>
            </div>
          </div>
          <div v-else-if="codeId === 18 || codeId === 19" slot="responseResult">
            <div class="table-result">
              <span style="width:100px;" class="title">序号</span>
              <span class="title" style="width:180px;">分类名称</span>
              <span class="title">置信度</span>
            </div>
            <div v-for="(item,index) in score" :key="index" class="table-result">
              <span style="width:100px;">{{Number(index)+1}}</span>
              <span style="width:180px;">{{item.name}}</span>
              <span>{{item.confidence}}</span>
            </div>
          </div>
          <div v-else-if="codeId === 11" slot="responseResult">
            <div class="image-right-big" :style="{
                'background-image': `url(data:image/png;base64,${imageRightBigUrl}`
              }">

            </div>
            <div class="image-right-small">
              <div v-for="(item ,index) in imgUrlList" :key="index" class="image-inner" @click="clickCurrentRightIndex(index)"
                  :style="{
                    border:
                      currentRightIndex === index
                        ? '2px solid #E74445'
                        : '2px solid #969696',
                    'background-image': `url(data:image/png;base64,${item})`
                  }">
              </div>
            </div>
          </div>
          <div v-else-if="codeId === 7" slot="responseResult">
            <a-row class="rubbish-result-title">
              <a-col :span="8">Garbage_name</a-col>
              <a-col :span="8">Gate_name</a-col>
              <a-col :span="8">Confidence</a-col>
            </a-row>
          </div>
          <div v-else-if="codeId === 14" slot="responseResult">
            <div class="personCar">
              <div class="blue">蓝色标注为行人</div>
              <div class="red">红色标注为非机动车辆</div>
            </div>
          </div>
          <div v-else-if="codeId === 16" slot="responseResult">
            <div class="personCar">
              <div v-if="!(facePostureImgsList && facePostureImgsList.length>0)">未检测到目标</div>
              <div v-else>
                <div class="blue">蓝色标注为烟雾</div>
                <div class="green">绿色标注为明火</div>
              </div>
            </div>
          </div>
          <div v-else-if="codeId === 15" slot="responseResult">
            <div class="personCar">
              <div class="red">违禁车辆</div>
            </div>
          </div>
          <div v-else-if="codeId === 4" slot="responseResult">
            <div class="face-posture">
              <div class="face-posture-header" v-if='facePostureImgsList.length'>
                  <a-icon class="icon-left" @click="PrevRight" type="left" />
                  <div class="right-imgs-wrapper">
                    <div class="right-imgs-inner" :style="{
                        width: `${facePostureImgsList.length * 103}px`,
                        left: `${facePostureRightSmallImageleft}px`
                      }">
                        <div class="right-imgs-item"  v-for="(item, index) in facePostureImgsList"
                            :key="index"
                            @click="clickRightCurrentIndex(index)"
                            :style="{
                              border:
                                facePostureRightCurrentIndex === index
                                  ? '2px solid rgba(231, 68, 69, 1)'
                                  : '2px solid #969696',
                              'background-image':item.faceImg?`url(data:image/png;base64,${item.faceImg})`:''
                            }"></div>
                    </div>
                  </div>
                  <a-icon class="icon-left" @click="NextRight" type="right" />
              </div>
              <div class="face-posture-bottom" v-if='facePostureImgsList.length'>
                   <div class="face-posture-text">
                      <span class='left-icon'></span>
                      {{ `共检测到图中${facePostureImgsList.length}张人脸`}}
                  </div>
                  <div class="face-posture-position">
                    <div class="right-position-text">人脸姿态</div>
                    <div class="right-position"  :style="{
                      transform: `rotateZ(${parseFloat(facePostureImgsCurrentResult.Roll).toFixed(2)}deg)`
                      }
                    "></div>
                  </div>
                  <div class="face-posture-data">
                    <p>{{ `俯仰角：${facePostureImgsCurrentResult.Pitch ?parseFloat(facePostureImgsCurrentResult.Pitch).toFixed(2):0}` }}</p>
                    <p>{{ `滚动角：${facePostureImgsCurrentResult.Roll?parseFloat(facePostureImgsCurrentResult.Roll).toFixed(2):0}` }}</p>
                    <p>{{ `偏航角：${facePostureImgsCurrentResult.Yaw?parseFloat(facePostureImgsCurrentResult.Yaw).toFixed(2):0}` }}</p>
                  </div>
              </div>
            </div>
          </div>
          <div v-if="[72,73,74,75,76,77,78,79,17,21].includes(codeId)" slot="responseResult" >
            <div class="result ocrResult">
              <div class="item" v-for="(item,index) in ocrResult" :key="index">{{item.key}}: {{item.value}}</div>
            </div>
          </div>
          <div v-if="[87,88].includes(codeId)" slot="responseResult" >
            <div class="result ocrResult">
              <div class="item" v-for="(item,index) in ocrResult" :key="index">{{item.text}}</div>
            </div>
          </div>
          <div v-else-if="codeId === 110" slot="responseResult">
            <div class="hat-result">
              <div class="red">红色标注为小型汽车</div>
              <div class="green">绿色标注为货车</div>
              <div class="blue">蓝色标注为客车</div>
            </div>
          </div>
        </json-wrap>
      </a-col>
    </a-row>
  </div>
</template>
<script>
import imgInput from '../ImgInput'
import jsonWrap from '../JsonWrap'
import Resolution from './Resolution'
import { eventParamsMap } from '@/utils/eventCollect'
export default {
  components: {
    imgInput,
    jsonWrap,
    Resolution
  },
  props: {
    beforeUpload: {
      type: Function
    },
    uploadOption: {
      type: Object
    },
    responseResult: {
      type: Object,
      default () {
        return {}
      }
    },
    imagesDataList: {
      type: Array,
      default () {
        return []
      }
    },
    imgUploading: {
      type: Boolean,
      default: false
    },
    currentIndex: {
      type: Number,
      default: 0
    },
    tips: {
      type: String,
      default: null
    }
  },
  data () {
    return {
      smallImageleft: 0,
      resJson: {},
      bigImageUrl: '',
      imageRightBigUrl: null,
      bigImgBlobUrl: null,
      currentRightIndex: 0,
      carObj: {},
      carColor: null,
      licensePlate: null,
      mainShield: null,
      sideShield: null,
      annualMark: null,
      tissueBox: null,
      hangings: null,
      facePostureRightCurrentIndex: 0,
      facePostureRightSmallImageleft: 0,
      facePostureImgsList: [],
      facePostureImgsCurrentResult: {},
      faceNums: 0,
      idCardResult: null,
      passportResult: null,
      score: [],
      ocrResult: null,
      currentResult: null,
      imgUrlList: [],
      newImageWidth: 0,
      newImageHeight: 0
    }
  },
  computed: {
    codeId () {
      const { id } = this.$route.params
      return id && parseInt(id)
    },
    eventParams () {
      const { id } = this.$route.params
      return eventParamsMap[id]
    }
  },
  watch: {
    imagesDataList: {
      handler (newVal) {
        if (newVal) {
          this.handlerList(this.currentIndex, newVal)
        }
      },
      deep: true,
      immediate: true
    }
  },
  created () {
  },
  methods: {
    handlerList (idx, array) {
      this.bigImageUrl = array[idx] && array[idx].img ? array[idx].img : (array[idx].image ? array[idx].image : null)
      this.bigImgBlobUrl = array[idx] && array[idx].imgUrl
      this.resJson = array[idx] && array[idx].resJson ? array[idx].resJson : {}
      this.currentResult = array[idx] && array[idx].license_plate_number
      this.carObj = array[idx]
      this.currentRightIndex = 0

      if (this.imgUrlList && this.imgUrlList.length > 0) {
      } else {
        this.imageRightBigUrl = null
      }
      if (idx > 4) {
        this.smallImageleft = (idx - 4) * -123
      }
      this.facePostureRightCurrentIndex = 0
      this.facePostureRightSmallImageleft = 0
      this.facePostureImgsList = array[idx] && array[idx].result ? array[idx].result : []
      this.facePostureImgsCurrentResult = array[idx] && array[idx].result ? this.facePostureImgsList[this.facePostureRightCurrentIndex] : {}
      this.faceNums = array[idx] && array[idx].face_num ? array[idx].face_num : 0
      this.idCardResult = array[idx] && array[idx].result ? array[idx].result : null
      this.passportResult = array[idx] && array[idx].result ? array[idx].result : null
      this.ocrResult = array[idx] && array[idx].result ? array[idx].result : null
      if (this.bigImageUrl) {
        const img = new Image()
        img.onload = () => {
          const { width, height } = img
          this.newImageWidth = width
          this.newImageHeight = height
        }
        img.src = `data:image/png;base64,${this.bigImageUrl}`
      }
    },
    onFileChange (value) {
      this.$emit('onFileChange', value)
    },
    Prev () {
      const idx = this.currentIndex - 1
      this.$emit('update:currentIndex', idx)
      this.$nextTick(() => {
        this.CalcIndex('Prev')
      })
    },
    Next () {
      const idx = this.currentIndex + 1
      this.$emit('update:currentIndex', idx)
      this.$nextTick(() => {
        this.CalcIndex('Next')
      })
    },
    CalcIndex (val) {
      const listLength = this.imagesDataList.length
      if (this.currentIndex < 0) {
        this.$emit('update:currentIndex', listLength - 1)
      } else if (this.currentIndex > listLength - 1) {
        this.$emit('update:currentIndex', 0)
      }
      this.$nextTick(() => {
        const condition = (this.currentIndex >= 0 && this.currentIndex <= 4) || this.currentIndex > listLength - 1
        if (val === 'Next') {
          if (condition) {
            this.smallImageleft = 0
          } else {
            this.smallImageleft = this.smallImageleft - 123
          }
        } else if (val === 'Prev') {
          if (condition) {
            this.smallImageleft = 0
          } else if (this.currentIndex >= listLength - 1) {
            this.smallImageleft = (listLength - 5) * -123
          } else {
            this.smallImageleft = this.smallImageleft + 123
          }
        }
        this.clickCurrentIndex(this.currentIndex)
      })
    },
    clickCurrentIndex (index) {
      const { imgUrl, resJson } = this.imagesDataList[index]
      this.bigImageUrl = null
      this.bigImgBlobUrl = imgUrl
      this.$emit('update:currentIndex', index)
      if (!resJson) {
        this.$emit('clickUpload', {
          url: this.bigImgBlobUrl,
          len: index
        })
      } else {
        this.handlerList(index, this.imagesDataList)

        this.$refs.resolution.resetCss()
        this.$refs.resolution.reShowaAimation()
      }
    },
    PrevRight () {
      this.facePostureRightCurrentIndex = this.facePostureRightCurrentIndex - 1
      this.CalcIndexRight('Prev')
    },
    NextRight () {
      this.facePostureRightCurrentIndex = this.facePostureRightCurrentIndex + 1
      this.CalcIndexRight('Next')
    },
    CalcIndexRight (val) {
      const listLength = this.facePostureImgsList.length
      if (this.facePostureRightCurrentIndex < 0) {
        this.facePostureRightCurrentIndex = listLength - 1
      } else if (this.facePostureRightCurrentIndex > listLength - 1) {
        this.facePostureRightCurrentIndex = 0
      }
      if (val === 'Next') {
        if (
          (this.facePostureRightCurrentIndex >= 0 && this.facePostureRightCurrentIndex <= 3) ||
          this.facePostureRightCurrentIndex > listLength - 1
        ) {
          this.facePostureRightSmallImageleft = 0
        } else {
          this.facePostureRightSmallImageleft = this.facePostureRightSmallImageleft - 103
        }
      } else if (val === 'Prev') {
        if (
          (this.facePostureRightCurrentIndex >= 0 && this.facePostureRightCurrentIndex <= 3) ||
          this.facePostureRightCurrentIndex > listLength - 1
        ) {
          this.facePostureRightSmallImageleft = 0
        } else if (this.facePostureRightCurrentIndex >= listLength - 1) {
          this.facePostureRightSmallImageleft = (listLength - 4) * -103
        } else {
          this.facePostureRightSmallImageleft = this.facePostureRightSmallImageleft + 103
        }
      }

      this.facePostureImgsCurrentResult = this.facePostureImgsList[this.facePostureRightCurrentIndex]
    },
    clickRightCurrentIndex (idx) {
      this.facePostureRightCurrentIndex = idx
      this.facePostureImgsCurrentResult = this.facePostureImgsList[idx]
    },
    clickCurrentRightIndex (index) {
      this.imageRightBigUrl = this.imgUrlList[index]
      this.currentRightIndex = index
    },
    animation () {
      this.$refs.resolution.animation()
    },
    resetCss () {
      this.$refs.resolution.resetCss()
    }
  }
}
</script>
<style lang="less" scoped>

.image-right-big{
  width: 100%;
  height: 470px;
  background-color: #fff;
  background-repeat: no-repeat;
  background-size: contain;
  background-position: 50%;
  position: relative;
}

.image-right-small{
  width: 358px;
  margin: 20px auto;
  height: 80px;
  .image-inner{
    width: 110px;
    height: 80px;
    background-repeat: no-repeat;
    background-size: contain;
    background-position: 50%;
    border: 2px solid #969696;
    float: left;
    margin-right: 13px;
    overflow: hidden;
    cursor: pointer;
    &:last-child{
      margin-right:0;
    }
  }
}

.images-list {
  background-color: #ebebeb;
  padding-bottom: 20px;
  .image-big {
    height: 520px;
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: center;
    position: relative;
    &:hover {
      .icon-left-big {
        display: inline-block;
      }
    }
    .image-big-body {
      height: 520px;
      width: 700px;
      background-color: #343434;
      background-repeat: no-repeat;
      background-size: contain;
      background-position: 50%;
      position: relative;
      img {
        height: 100%;
      }
    }
    .image-feace-nums{
      position: absolute;
      right: 0;
      top: 0;
      font-family:Source Han Sans CN;
      background:rgba(0,0,0,0.4);
      font-size:12px;
      padding:14px 15px;
      font-weight:400;
      color:rgba(255,255,255,1);
    }
    .imgUploading{
      width: 100%;
      height: 5px;
      position: absolute;
      top: 0;
      left: 0;
      z-index: 20;
      background-image:linear-gradient(to top, rgba(100,149,237,0.5), rgba(255,255,255,.4));
      animation: scan 1.3s linear infinite normal;
    }
  }
  @keyframes scan{
    from{
      height: 0;
    }
    to{
      height: 100%;
    }
  }
  .image-small-list {
    width: 100%;
    height: 80px;
    margin-top: 20px;
    display: flex;
    flex-direction: row;
    .small-outer {
      width: 610px;
      height: 80px;
      overflow: hidden;
      position: relative;
      .small-inner {
        overflow: hidden;
        position: absolute;
        transition: all 0.5s;
        cursor: pointer;
        .image-inner {
          width: 110px;
          height: 80px;
          background-repeat: no-repeat;
          background-size: contain;
          background-position: 50%;
          border: 2px solid #969696;
          float: left;
          margin-right: 13px;
          overflow: hidden;
          img {
            width: 100%;
            cursor: pointer;
          }
        }
      }
    }
  }
  .icon-left-big {
    display: none;
  }
  .icon-left {
    color: #999;
    height: 80px;
    line-height: 80px;
    font-size: 25px;
    padding: 0 10px;
    cursor: pointer;
    &:hover {
      color: #e74445;
    }
  }
}
.hat-result, .personCar, .face-posture{
  font-size: 12px;
  padding:15px 20px;
}
.green{
  position: relative;
  padding-left: 20px;
  padding-bottom: 10px;
  &::before{
    content: '';
    position: absolute;
    left:-0px;
    width: 12px;
    height: 12px;
    border: 2px solid #45D445;
  }
}
.red{
  position: relative;
  padding-left: 20px;
  padding-bottom: 10px;
  &::before{
    content: '';
    position: absolute;
    left:-0px;
    width: 12px;
    height: 12px;
    border: 2px solid #E74445;
  }
}

.blue{
  position: relative;
  padding-left: 20px;
  padding-bottom: 10px;
  &::before{
    content: '';
    position: absolute;
    left:-0px;
    width: 12px;
    height: 12px;
    border: 2px solid #379AFF;
  }
}
.face-posture-header{
  width: 100%;
  height: 90px;
  display: flex;
  flex-direction: row;
  .right-imgs-wrapper{
    flex:1;
    height: 90px;
    overflow: hidden;
    position: relative;
  }
  .right-imgs-inner{
    overflow: hidden;
    position: absolute;
    transition: all 0.5s;
    height: 90px;
    cursor: pointer;
  }
  .right-imgs-item{
    width:95px;
    height: 100%;
    float:left;
    background-repeat: no-repeat;
    background-size: contain;
    background-position: 50%;
    border:1px solid rgba(231, 68, 69, 1);
    margin-right: 8px;
    cursor: pointer;
    &:last-child{
      margin-right:0;
    }
  }
}

.face-posture{
  .icon-left {
    color: #999;
    height: 90px;
    line-height: 90px;
    font-size: 14px;
    cursor: pointer;
    &:hover {
      color: #e74445;
    }
    &:first-child{
      padding-right:13px;
    }
    &:last-child{
      padding-left:13px;
    }
  }
}

.face-posture-text{
    margin-top:32px;
    margin-bottom:14px;
    display: flex;
    align-items: center;
    .left-icon{
      display: inline-block;
      width:14px;
      height:14px;
      border:2px solid #3F8EF0;
      margin-right:11px;
    }
  }

  .face-posture-bottom{
    font-size:12px;
    padding-left: 25px;
    font-family:Source Han Sans CN;
    font-weight:400;
    color:rgba(60,60,60,1);
    line-height:26px;
    .face-posture-position{
      padding-left:25px;
      margin-bottom:27px;
      display: flex;
      perspective: 10000px;
      .right-position{
        margin-left:10px;
        width:31px;
        height:31px;
        border:1px solid rgba(63,142,240,1);
      }
    }
    .face-posture-data{
      padding-left:25px;
    }
  }

  .face-posture-empty{
    margin-top:30px;
    color: #3c3c3c;
    font-size: 12px;
  }

  .id-card-detail{
    padding:22px 40px 0;
    font-size: 12px;
    font-family: Source Han Sans CN Regular, Source Han Sans CN Regular-Regular;
    font-weight: 400;
    text-align: left;
    color: #3c3c3c;
    line-height: 27px;
    letter-spacing: 1px;
    .item{
      overflow: hidden;
      white-space: nowrap;
      text-overflow: ellipsis;
    }
  }

  /deep/ .result {
    font-size: 13px;
    line-height: 18px;
    padding:15px 20px;
  }

  .rubbish-result-title{
    padding: 20px 40px;
    .ant-col-8{
      font-size:12px;
      font-family:Arial;
      font-weight:400;
      color:rgba(0,0,0,1);
    }
  }
  .rubbish-result-value{
    padding: 0 40px;
    .ant-col-8{
      margin-bottom: 20px;
      font-size:12px;
      font-family:Arial;
      font-weight:400;
      color:rgba(0,0,0,1);
    }
  }

  .image-vivo-detection{
    position: absolute;
    right: 0;
    top: 0;
    background: rgba(0,0,0,0.4);
    color: #fff;
    letter-spacing: 1px;
    font-size: 12px;
    padding:8px 15px;
  }

.table-result{
  padding-left:50px;
  padding-top:15px;
  >span{
    display: inline-block;
    width:100px;
    font-size: 12px;
  }
  .title{
    font-size: 14px;
    font-weight: bold;
  }
}

.hat-result, .personCar, .face-posture, .result{
  font-size: 14px;
  padding:15px 20px;
  .item{
    line-height: 18px;
    margin-bottom: 10px;
  }
}
</style>
<template>
  <div class="personnel-comparison">
    <Spin v-if="loading"/>
    <ErrorPage v-else-if='errFlag' @left='refresh' @right='goHome'/>
    <div class="outer-container" v-else>
      <div class="goback" @click="goback"><a-icon type="left" />返回</div>
      <Card :cardInfo="abilityInfo.cardInfo"/>
      <div class="title">功能体验</div>
      <Comparison :uploadOptionLeft='uploadOption'
        :uploadOptionRight='uploadOption'
        :loading='searchLoading'
        :resMsg='resMsg'
        :btnMsg='btnMsg'
        :leftBase64='leftBase64'
        :rightBase64='rightBase64'
        :beforeUploadLeft='(file) => beforeUpload(file, "leftLoading")'
        :beforeUploadRight='(file) => beforeUpload(file, "rightLoading")'
        @onFileChangeLeft='onFileChangeLeft'
        @onFileChangeRight='onFileChangeRight'
        @start-search='startSearch'
        />
      <div class="title">应用场景</div>
      <ApplyScene :caseList="abilityInfo.sceneList"/>
    </div>
    <Footer/>
  </div>
</template>
<script>
import { getBase64, getBase64Url, dataURLtoFile } from '@/utils/helper'
import ApplyScene from './ApplyScene'
import Card from './Card'
import Comparison from './Comparison'
import axios from '@/services/http.js'
import Spin from '@/components/Spin.vue'
import Footer from '@/components/Footer.vue'
import ErrorPage from './Error'
export default {
  name: 'personnel-comparison',
  components: {
    ApplyScene,
    Card,
    Comparison,
    Spin,
    ErrorPage,
    Footer
  },
  data () {
    return {
      abilityInfo: {},
      uploadLoading: false,
      uploadOption: {
        name: 'imgFile',
        accept: 'image/*'
      },
      leftLoading: false,
      rightLoading: false,
      leftFile: null,
      rightFile: null,
      leftBase64: null,
      rightBase64: null,
      searchLoading: false,
      loading: false,
      resMsg: '点击开始比对，获取比对识别结果',
      btnMsg: '开始比对',
      errFlag: false
    }
  },
  created () {
    this.getInfo()
  },
  methods: {
    getInfo () {
      this.loading = true
      this.$api.AIdetails.getOcrTemplateData(this.$route.params.id).then(res => {
        this.loading = false
        if (res.code === 200) {
          this.errFlag = false
          const cardInfo = {
            imgUrl: res.data && res.data.responseCoverUrl,
            title: res.data && res.data.name,
            labels: res.data && res.data.scene,
            content: res.data && res.data.description,
            times: res.data && res.data.times
          }
          this.abilityInfo = {
            cardInfo,
            sceneList: res.data && res.data.sceneList
          }
          let { url, hdfsBaseUrl } = res.data && res.data
          url = url && url.split(',||,')
          if (url && url.length >= 2) {
            const left = `${hdfsBaseUrl}${url[0]}`
            const right = `${hdfsBaseUrl}${url[1]}`
            this.handleUrl(left, 'leftFile', 'leftBase64')
            this.handleUrl(right, 'rightFile', 'rightBase64')
          }
        } else {
          this.errFlag = true
        }
      }).catch(() => {
        this.loading = false
        this.errFlag = true
      })
    },
    handleUrl (url, fileName, baseName) {
      getBase64Url(url, (data) => {
        const file = dataURLtoFile(data, 'demo.png')
        this[fileName] = file
        this[baseName] = data
      })
    },
    goback () {
      this.$router.go(-1)
    },
    beforeUpload (file, flag = 'leftLoading') {
      this[flag] = true
      const imageTypeList = [
        'image/jpeg',
        'image/png',
        'image/jpg',
        'image/bmp'
      ]
      const isJPG = imageTypeList.indexOf(file.type) !== -1
      if (!isJPG) {
        this.$message.error('只图片支持的格式为PNG、JPG、JPEG、BMP等!')
        this[flag] = false
        return false
      }
      const isLt2M = file.size / 1024 / 1024 < 4
      if (!isLt2M) {
        this.$message.error('图片大小请限制在4M以内!')
        return false
      }
      if (flag === 'leftLoading') {
        this.leftFile = file
      } else {
        this.rightFile = file
      }
      getBase64(file, (res) => {
        this[flag] = false
        if (flag === 'leftLoading') {
          this.leftBase64 = res
        } else {
          this.rightBase64 = res
        }
      })
      return false
    },
    onFileChangeLeft ({ fileList, file }) {
    },
    onFileChangeRight ({ fileList, file }) {
    },
    startSearch () {
      const param = new FormData()
      param.append('left_img', this.leftFile)
      param.append('right_img', this.rightFile)
      const headers = {
        'Content-Type': 'multipart/form-data'
      }
      this.searchLoading = true
      this.btnMsg = '人脸比对中，请稍后'
      axios.post('/aiplatform_web/ability/case/face/verification', param, { headers }).then(res => {
        this.searchLoading = false
        this.btnMsg = '开始比对'
        if (res.code === 200) {
          this.resMsg = `通过识别比对，人脸相似度：${res.score}`
        } else {
          this.resMsg = res.msg
          this.$message.error(res.msg)
        }
      }).catch(() => {
        this.btnMsg = '开始比对'
        this.searchLoading = false
      })
    },
    refresh () {
      this.getInfo()
    },
    goHome () {
      this.$router.push({
        name: 'home'
      })
    }
  }
}
</script>
<style lang="less" scoped>
.personnel-comparison{
  height: calc(100% - 60px);
  margin-top: 60px;
  .outer-container{
    padding-bottom: 20px;
    width: 1200px;
    margin: auto;
    .goback{
      height: 60px;
      width: 80px;
      line-height: 60px;
      cursor: pointer;
      &:hover{
        color: #e74445;
      }
    }
    .title{
      border-top: 1px solid #b4b4b4;
      margin-top: 40px;
      margin-bottom: 20px;
      padding-top: 20px;
      color: #3c3c3c;
    }
  }
}
</style>
<template>
  <div class="apply-detail-person">
    <a-row>
      <a-col class="person-left" :span="4">
        <div
          v-for="(item, index) in leftImgList"
          :key="index"
          @click="handleLeftIndex(index)"
        >
          <div
            class="person-left-wrapper"
            :class="{ 'action-left-img': currentLeftImg === index }"
          >
            <span v-if="item.tips" class="wait">{{ item.tips }}</span>
            <div class="left-img-bg"
            :style="{
                    'background-image': `url(data:image/png;base64,${item.leftOriginImgUrl})`
              }"></div>
          </div>
        </div>
        <div class="peron-imgs-add" @click="addNew">
          <div class="upload">
            <i class="iconfont icon-tianjia add"></i>
            <div class="ant-upload-add">添加新任务</div>
          </div>
        </div>
      </a-col>
      <a-col class="person-right left-margin" :span="20">
        <a-row>
          <a-col class="person-center-big" :span="12">
            <div class="person-left-center">
              <div class="title-top">被查人脸</div>
              <div class="person-upload-big">
                <a-upload
                  v-if="!leftOriginImgUrl"
                  class="person-video-upload"
                  :showUploadList="false"
                  name='imgFile'
                  accept="image/*"
                  :headers="defaultHeader"
                  action="/aiplatform_web/bodyrecognition/face/recognition/checked"
                  :beforeUpload="beforeUploadLeft"
                  @change="handleleftChange"
                >
                  <div class="upload-video">
                    <i class="iconfont icon-tupianshangchuan add"></i>
                  </div>
                </a-upload>
                <div
                  v-if="!leftOriginImgUrl"
                  class="ant-upload-add"
                >
                  支持后缀为PNG、JPG、JPEG、BMP格式的图片，图片大小不超过4M
                </div>
                <div
                 v-if="leftOriginImgUrl && !leftUploading"
                  class="person-right-left-face"
                  :style="{
                    'background-image': `url(data:image/png;base64,${leftOriginImgUrl})`
                  }"
                >
                </div>
                <div class="imgUploading" v-if="leftUploading"></div>
              </div>
            </div>
          </a-col>
          <a-col :span="12">
            <div class="person-right" :style="{backgroundColor: '#f5f5f5'}">
              <div class="title-top">待识别图片</div>
              <div class="person-right-wrapper img-body">
                <a-upload
                  v-if="!rightImgUrl"
                  class="person-img-upload"
                  :showUploadList="false"
                  name='imgFile'
                  accept="image/*"
                  action="/aiplatform_web/bodyrecognition/face/recognition/target"
                  :beforeUpload="beforeUploadRight"
                  @change="handleRightChange"
                  :headers="defaultHeader"
                >
                  <div class="upload-img">
                    <i class="iconfont icon-tupianshangchuan add"></i>
                  </div>
                </a-upload>
                <div
                  v-if="!rightImgUrl"
                  class="ant-upload-add"
                >
                 支持后缀为PNG、JPG、JPEG、BMP格式的图片，图片大小不超过4M
                </div>
                <div
                 v-if='rightImgUrl'
                  class="person-right-left-face"
                  :style="{
                    'background-image': `url(data:image/png;base64,${rightImgUrl})`
                  }"
                >
                  <a-upload
                    class='person-right-alter-img'
                    :showUploadList="false"
                    name='imgFile'
                    accept="image/*"
                    action="/aiplatform_web/bodyrecognition/face/recognition/target"
                    :beforeUpload="beforeUploadRight"
                    @change="handleRightChange"
                    :headers="defaultHeader"
                  >
                    <a-button>替换图片</a-button>
                    <span class="img-notice">支持后缀为PNG、JPG、JPEG、BMP格式的图片，图片大小不超过4M</span>
                  </a-upload>
                </div>
                <div class="imgUploading" v-if="rightUploading"></div>
              </div>
            </div>
          </a-col>
        </a-row>
        <a-row v-show="!isShowResultLeftImg || !isShowResultRightImg" class="btns">
          <a-col class="left" :span="24">
            <div class="startup-loading" v-show="startupLoading">图片正在解析中，请耐心等待...</div>
            <a-button class="find" @click="startup" :disabled="!(rightImgUrl && leftOriginImgUrl && isCanStart)" :loading="startupLoading">开始查找</a-button>
          </a-col>
        </a-row>
      </a-col>
    </a-row>
  </div>
</template>

<script>
import axios from 'axios'
import personImg from '@/assets/img/people.png'
import { APPLY_DETAIL_FACE_LEFT, APPLY_DETAIL_FACE_RIGHT } from '@/constants/index'
import { getHeaderSet } from '@/services/jsencryptKey'
export default {
  name: 'uploadPerson',
  components: {
  },
  props: {},
  data: function () {
    const userInfo = this.Cookies.getJSON('userInfoAI')
    return {
      personImg,
      userInfo,
      personNum: 4,
      leftImgList: null,
      leftOriginImgUrl: null,
      leftUploading: false,
      rightImgUrl: null,
      rightUploading: false,
      startupLoading: false,
      currentLeftImg: 0,
      isErrorleft: false,
      isErrorRight: false,
      isShowResultLeftImg: false,
      isShowResultRightImg: false,
      defaultHeader: getHeaderSet(),
      isCanStart: true
    }
  },
  created () {
    const _this = this
    this.leftUploading = true
    this.rightUploading = true
    setTimeout(() => {
      _this.leftUploading = false
      _this.rightUploading = false
      _this.leftImgList = [{
        leftOriginImgUrl: APPLY_DETAIL_FACE_LEFT,
        rightImgUrl: APPLY_DETAIL_FACE_RIGHT
      }]

      this.leftOriginImgUrl = APPLY_DETAIL_FACE_LEFT
      this.rightImgUrl = APPLY_DETAIL_FACE_RIGHT
    }, 500)
  },
  methods: {
    handleLeftIndex (index) {
      const { leftImgList } = this
      this.currentLeftImg = index
      this.startupLoading = false
      this.leftOriginImgUrl = leftImgList[index].leftOriginImgUrl
      this.rightImgUrl = leftImgList[index].rightImgUrl
    },
    startup () {
      this.startupLoading = true
      this.rightUploading = true
      const _this = this
      const { leftOriginImgUrl, rightImgUrl } = this
      const params = {
        checkedImg: leftOriginImgUrl,
        targetImg: rightImgUrl
      }
      this.$api.home.eventCollect({
        token: this.userInfo && this.userInfo.token,
        userId: this.userInfo && this.userInfo.userId,
        mac: this.$getClientUnique(),
        eventCode: 5,
        eventName: 5,
        behavior: 2,
        eventButton: 1
      })
      const CancelToken = axios.CancelToken
      axios.post('/aiplatform_web/bodyrecognition/face/recognition/startup', params,
        {
          cancelToken: new CancelToken(function executor (c) {
            _this.cancelRequest = c
          }),
          headers: getHeaderSet()
        }).then(res => {
        _this.startupLoading = false
        const data = res.data
        if (data.code === 200) {
          this.changeLeftImgList({
            tips: '',
            leftOriginImgUrl: leftOriginImgUrl,
            rightImgUrl: data.data
          })

          this.leftOriginImgUrl = leftOriginImgUrl
          this.rightImgUrl = data.data
          this.rightUploading = false
        } else {
          this.$message.error(data.msg)
          this.rightUploading = false
        }
      }).catch(() => {
        this.rightUploading = false
        this.startupLoading = false
      })
    },
    addNew () {
      if (this.cancelRequest) {
        this.cancelRequest()
      }
      this.currentLeftImg = this.leftImgList.length
      this.startupLoading = false
      this.isShowResultImg = false
      this.leftOriginImgUrl = null
      this.rightImgUrl = null
      this.leftImgList = [
        ...this.leftImgList,
        { isnew: true, tips: '等待上传', leftOriginImgUrl: '', rightImgUrl: '' }
      ]
    },
    changeLeftImgList (data) {
      console.log(data)
      this.leftImgList[this.currentLeftImg] = {
        ...this.leftImgList[this.currentLeftImg],
        ...data
      }
    },
    handleleftChange ({ fileList, file }) {
      this.handleChangeAll({ fileList, file }, 'left')
    },
    handleRightChange ({ fileList, file }) {
      this.handleChangeAll({ fileList, file }, 'right')
    },
    beforeUploadLeft (file) {
      this.defaultHeader = getHeaderSet()
      const flag = this.beforeUploadAll(file, 'left')
      return flag
    },
    beforeUploadRight (file) {
      this.defaultHeader = getHeaderSet()
      const flag = this.beforeUploadAll(file, 'right')
      return flag
    },
    handleChangeAll ({ fileList, file }, flag) {
      if (file.status === 'done') {
        flag === 'left' ? (this.leftUploading = false) : (this.rightUploading = false)
        if (file.response && file.response.code === 200) {
          if (flag === 'left') {
            this.changeLeftImgList(
              {
                tips: '',
                leftOriginImgUrl: file.response.data
              })

            this.leftOriginImgUrl = file.response.data
          } else {
            this.changeLeftImgList(
              {
                tips: '',
                rightImgUrl: file.response.data
              })

            this.rightImgUrl = file.response.data
          }
        } else {
          this.changeLeftImgList({ tips: '等待上传' })
          this.$message.error(file.response.msg)
        }
      } else if (file.status === 'error') {
        flag === 'left' ? (this.leftUploading = false) : (this.rightUploading = false)
        this.changeLeftImgList({ tips: '等待上传', leftOriginImgUrl: '', rightImgUrl: '' })
        this.$message.error(file.response.message)
      }
    },
    beforeUploadAll (file, flag) {
      flag === 'left' ? (this.leftUploading = true) : (this.rightUploading = true)
      this.changeLeftImgList({ tips: '正在上传中' })
      const imageTypeList = [
        'image/jpeg',
        'image/png',
        'image/jpg',
        'image/bmp',
        'image/svg',
        'image/webp'
      ]
      const isJPG = imageTypeList.indexOf(file.type) !== -1
      if (!isJPG) {
        this.$message.error('只图片支持的格式为PNG、JPG、JPEG、BMP等!')
        flag === 'left' ? (this.leftUploading = false) : (this.rightUploading = false)
        this.isCanStart = false
        this.changeLeftImgList({ tips: '等待上传' })
        return false
      }
      const isLt2M = file.size / 1024 / 1024 < 4
      if (!isLt2M) {
        this.$message.error('图片大于4M，请重新上传!')
        flag === 'left' ? (this.leftUploading = false) : (this.rightUploading = false)
        this.changeLeftImgList({ tips: '等待上传' })
        this.isCanStart = false
        return false
      }
      this.isCanStart = true
      return true
    }
  }
}
</script>
<style lang="less" scoped>
.apply-detail-person {
  width: 100%;
  .person-left-wrapper {
    width: 100%;
    height: 110px;
    margin-top: 5px;
    border: 2px solid #f7f7f7;
    background-color: #f7f7f7;
    position: relative;
    .left-img-bg{
      width: 100%;
      height: 100%;
      background-size:contain;
      background-repeat: no-repeat;
      background-position: center;
    }
    cursor: pointer;
    position: relative;
    .wait {
      position: absolute;
      bottom: 0;
      height: 24px;
      width: 100%;
      background-color: #e74445;
      font-size: 12px;
      color: #fff;
      line-height: 24px;
      text-align: center;
    }
  }
  .action-left-img {
    border: 2px solid #e74445;
  }
  .person-left {
    height: 500px;
    overflow: auto;
    border: 1px solid #dcdcdc;
    padding: 0 5px;
    .peron-imgs-add {
      font-size: 12px;
      text-align: center;
      width: 100%;
      height: 110px;
      display: flex;
      justify-content: center;
      flex-direction: row;
      align-content: center;
      background-color: #f7f7f7;
      margin-top:5px;
      cursor: pointer;
      .upload {
        width: 100%;
        height: 100%;
        display: flex;
        padding-top: 5px;
        justify-content: center;
        flex-direction: column;
        align-content: center;
        background-color: #f7f7f7;
      }
      .add {
        font-size: 30px;
      }
      .ant-upload-add {
        padding-top: 10px;
      }
    }
  }
  .person-right-wrapper{
    margin-right: 20px;
    height: 387px;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    position: relative;
    background-color: #fff;
  }
  .person-right-left-face{
    width:100%;
    height: 387px;
    position: relative;
    background-repeat: no-repeat;
    background-size:contain;
    background-position: 50%;
    .person-right-alter-img{
      width:100%;
      height:60px;
      background:rgba(0,0,0,0.5);
      padding: 11px 5px;
      box-sizing: border-box;
      position: absolute;
      bottom: 0;
      /deep/.ant-upload{
          display: flex;
      }
      /deep/ .ant-upload .ant-btn{
        display: inline-block;
        width: 116px;
        height: 38px;
        font-size: 14px;
        background-color: #E74445;
        border-color: #E74445;
        border-radius: 0;
        color: #fff;
      }
      .img-notice{
        margin-left: 10px;
        color: #f1f1f1;
        font-size: 12px;
        line-height: 17px;
      }
    }
  }
  .title-top {
    font-size: 16px;
    text-align: center;
    padding-right: 20px;
    height: 50px;
    line-height: 50px;
    background-color: #f5f5f5;
  }
  .left-margin{
    padding-left: 20px;
  }
  .left-margin {
    background-color: #fff;
    .person-center-big {
      height: 100%;
      .person-left-center {
        height: 100%;
        width: 100%;
        background-color: #f5f5f5;
        .person-video-big {
          width: 100%;
          height: 386px;
        }
        .person-upload-big {
          height: 387px;
          margin-left: 20px;
          margin-right: 20px;
          position: relative;
          box-shadow:0px 1px 6px 0px rgba(0, 0, 0, 0.1);
          background-color: #fff;
          display: flex;
          flex-direction: column;
          justify-content: center;
          align-items: center;
          .person-video-upload {
            cursor: pointer;
            padding-left: 15px;
            padding-right: 15px;
            /deep/ .ant-upload-select-text {
              .upload-video {
                .add {
                  font-size: 45px;
                  color: #e74445;
                }
              }
            }
          }
          .ant-upload-add {
            text-align: center;
            color: #828282;
            font-size: 12px;
            width: 400px;
            line-height: 20px;
          }
        }
      }
    }
    .img-body {
      margin-right: 20px;
      height: 387px;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      position: relative;
      background-color: #fff;
      .person-img-upload {
        display: inline-block;
        padding-left: 15px;
        padding-right: 15px;
        cursor: pointer;
        /deep/ .ant-upload-select-text {
          .ant-upload {
            display: inline-block;
            .upload-img {
              .add {
                font-size: 45px;
                color: #e74445;
              }
            }
          }
        }
      }
      .ant-upload-add {
        text-align: center;
        color: #828282;
        font-size: 12px;
        line-height: 20px;
      }
    }

    .btns {
      height:60px;
      background:rgba(212,212,212,1);
      .find {
        border-radius: 0;
        background-color: #e74445;
        color: #fff;
      }
      .ant-btn[disabled] {
        background-color: #f5f5f5;
        color: rgba(0, 0, 0, 0.25);
      }
      .left {
        height: 100%;
        background-color: #f7f7f7;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: flex-end;
        padding-right: 20px;
        .startup-loading{
          font-size: 14px;
          margin-bottom: 10px;
        }
      }
      .right {
        height: 110px;
        margin-left: 20px;
        background-color: #f7f7f7;
        display: flex;
        flex-direction: row;
        justify-content: center;
        align-items: center;
      }
    }
  }
  .tips {
    width: 100%;
    height: 110px;
    line-height: 110px;
    text-align: center;
    font-size: 14px;
    color: #e74445;
    background-color: #f7f7f7;
  }
}

.imgUploading{
  width: 100%;
  height: 5px;
  position: absolute;
  top: 0;
  left: 0;
  z-index: 20;
  background-image:linear-gradient(to top, rgba(100,149,237,0.5), rgba(255,255,255,.4));
  animation: scan 1.3s linear infinite normal;
}
@keyframes scan{
  from{
    height: 0;
  }
  to{
    height: 100%;
  }
}
</style>
<template>
  <div class="face-key-points">
    <basic-template  @updateRect="drawPoint" :rectVisible.sync='showPoints'>
      <template #bigImgExtra>
        <div class="mask">
          <canvas ref='pointWrapper' class='point-canvas' :class="{ markClose: !faceBtn || !showPoints}"></canvas>
        </div>
        <div class="btn-wrapper">
          <div class="points-btn">
            <span>关键点开关</span>
            <a-switch v-model='faceBtn' @change="change" />
          </div>
        </div>
      </template>
      <template v-slot:right="{responseJson, loading}">
        <JsonWrap :responseJson="responseJson" :loading="loading"></JsonWrap>
      </template>
    </basic-template>
  </div>
</template>
<script>
import BasicTemplate from '@/components/page/basicTemplate.vue'
export default {
  name: 'face-key-points',
  components: {
    BasicTemplate
  },
  data: () => ({
    faceBtn: true,
    showPoints: false
  }),
  methods: {
    change (status) {
      this.faceBtn = status
    },
    drawPoint (res, url) {
      const canvas = this.$refs.pointWrapper
      const ctx = canvas.getContext('2d')
      this.showPoints = false

      const img = new Image()
      const width = 700
      const height = 520
      const ratio = width / height
      const { result } = res.data
      img.src = url
      let realW, realH, realRato
      img.onload = () => {
        this.showPoints = true
        const { width: currentWidth, height: currentHeight } = img
        const current = currentWidth / currentHeight
        if (current <= ratio) {
          realH = height
          realW = current * height
          realRato = height / currentHeight
        } else {
          realW = width
          realH = width / current
          realRato = width / currentWidth
        }

        canvas.width = realW
        canvas.height = realH
        ctx.canvas.width = realW
        ctx.canvas.height = realH

        this.faceBtn = true
        result.map(item => {
          const { landmark } = item
          landmark && landmark.map(value => {
            ctx.beginPath()
            value && (value.length === 2) && ctx.arc(value[0] * realRato, value[1] * realRato, 1, 0, 2 * Math.PI, true)
            ctx.fillStyle = '#4affca'
            ctx.fill()
          })
        })
      }
    }
  }
}
</script>
<style lang="less" scoped>
.face-key-points{
  .mask{
    width: 100%;
    height: 100%;
    position: absolute;
  }
  .point-canvas{
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
  }
  .markClose{
    visibility: hidden;
  }
  .btn-wrapper{
    font-size: 12px;
    color: #666666;
    position: absolute;
    top: 20px;
    right: 20px;
  }
  .points-btn{
    display: flex;
    align-items: center;
    > span{
      margin-right: 10px;
    }
  }
}
</style>
<template>
  <div class="contentTxt">
    <h1 class="underline">头部姿态识别</h1>

    <h2>接口描述</h2>

    <p>头部姿态识别API可以快速检测到人脸，并返回人的头部姿态，是许多智能系统检测身份和理解行为的关键，对理解用户的态度和意图 起到不可替代的重要作用。</p>

    <h2>图片要求</h2>

    <p>1. 图片格式：PNG、JPG、JPEG、BMP</p>
    <p>2. 图片大小：小于4M</p>

    <h2>基本信息</h2>

    <p>
      <i>Path：</i>http://apigw.deepblueai.com/api/aiplatform_web/apiCloud/face/pose</p>

    <p>
      <i>Method：</i> POST</p>

    <h2>请求参数</h2>
    <p>
      <i>Headers</i>
    </p>
    <a-table :row-key="(r,i)=>{return Math.random()}" :columns="columns" :data-source="data"></a-table>

    <p>
      <i>Body</i>
    </p>
    <a-table :row-key="(r,i)=>{return Math.random()}" :columns="columns2" :data-source="data2"></a-table>

    <h2>返回数据</h2>
    <a-table :defaultExpandAllRows="true" :row-key="(r,i)=>{return Math.random()}" :columns="columns3" :data-source="data3" :pagination={pageSize:20}></a-table>

    <h2>返回报文示例</h2>

    <div class="code">
      <pre>
        {
          "code": <span class="green">200</span>,
          "msg": <span class="red">"Successful operation"</span>,
          "data": {
            "result": [
              {
                "faceImg": <span class="red">"/9j/4AAQSkZJRgABAQAAAQABAAD..."</span>,
                "Pitch": <span class="red">"13.906757276486806"</span>,
                "Roll": <span class="red">"22.65693151550193"</span>,
                "Yaw": <span class="red">"10.693154398083179"</span>
              },
              {
                "faceImg": <span class="red">"/9j/4AAQSkZJRgABAQAAAQABAA..."</span>,
                "Pitch": <span class="red">"-16.0199055851796"</span>,
                "Roll": <span class="red">"-4.722337714562273"</span>,
                "Yaw": <span class="red">"-14.174025114214107"</span>
              },
              {
                "faceImg": <span class="red">"/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAIBA..."</span>,
                "Pitch": <span class="red">"0.40902984763181616"</span>,
                "Roll": <span class="red">"-10.200298149300906"</span>,
                "Yaw": <span class="red">"52.64859833765866"</span>
              }
            ],
            "img": <span class="red">"/9j/4AAQSkZJRgABAQAAAQABAAD..."</span>
          }
        }</pre>
    </div>
  </div>

</template>

<script>
export default {
  data () {
    return {
      data: [
        {
          1: 'authorization',
          2: 'Bearer token',
          3: '是',
          4: '认证token'
        },
        {
          1: 'Content-Type',
          2: 'multipart/form-data',
          3: '是',
          4: 'body类型'
        }
      ],
      data2: [
        {
          1: 'image',
          2: 'base64(去掉前缀)',
          3: '是',
          4: 'base64字符串'
        }
      ],
      columns: [
        {
          title: '参数名称',
          dataIndex: '1'
        },
        {
          title: '参数值',
          dataIndex: '2'
        },
        {
          title: '是否必须',
          dataIndex: '3'
        },
        {
          title: '备注',
          dataIndex: '4'
        }
      ],
      columns2: [
        {
          title: '参数名称',
          dataIndex: '1'
        },
        {
          title: '参数类型',
          dataIndex: '2'
        },
        {
          title: '是否必须',
          dataIndex: '3'
        },
        {
          title: '备注',
          dataIndex: '4'
        }
      ],
      columns3: [
        {
          title: '返回字段',
          dataIndex: '1'
        },
        {
          title: '字段类型',
          dataIndex: '2'
        },
        {
          title: '字段含义',
          dataIndex: '3'
        }
      ],
      data3: [
        {
          1: 'code',
          2: 'Integer',
          3: '状态编码（200成功）'
        },
        {
          1: 'msg',
          2: 'string',
          3: '操作提示'
        },
        {
          1: 'data',
          2: 'string',
          3: '图片base64',
          children: [{
            1: 'result',
            2: 'jsonArray',
            3: '返回结果',
            children: [{
              1: 'faceImg',
              2: 'string',
              3: '截取的人脸'
            },
            {
              1: 'Pitch',
              2: 'string',
              3: '俯仰角'
            },
            {
              1: 'Roll',
              2: 'string',
              3: '偏航角'
            },
            {
              1: 'Yaw',
              2: 'string',
              3: '翻滚角'
            }]
          },

          {
            1: 'img',
            2: 'string',
            3: '图片base64'
          }]
        }

      ]
    }
  }
}
</script>

<style lang="less" scoped>
@import "../document_style.less";
</style>
<template>
  <div class="contentTxt">
    <h1 class="underline">人脸比对</h1>

    <h2>接口描述</h2>

    <p>将两张照片的人脸进行 1：1 比对，计算图片中两张人脸的相似度，判断是否为同一人。</p>

    <h2>图片要求</h2>

    <p>1. 图片格式：PNG、JPG、JPEG、BMP</p>
    <p>2. 图片大小：小于4M</p>

    <h2>基本信息</h2>

    <p>
      <i>Path：</i>http://apigw.deepblueai.com/api/aiplatform_web/apiCloud/face/verification</p>

    <p>
      <i>Method：</i> POST</p>

    <h2>请求参数</h2>
    <p>
      <i>Headers</i>
    </p>
    <a-table :row-key="(r,i)=>{return Math.random()}" :columns="columns" :data-source="data"></a-table>

    <p>
      <i>Body</i>
    </p>
    <a-table :row-key="(r,i)=>{return Math.random()}" :columns="columns2" :data-source="data2"></a-table>

    <h2>返回数据</h2>
    <a-table :defaultExpandAllRows="true" :row-key="(r,i)=>{return Math.random()}" :columns="columns3" :data-source="data3" :pagination={pageSize:20}></a-table>

    <h2>返回报文示例</h2>

    <div class="code">
      <pre>
        {
          "code": <span class="green">200</span>,
          "msg": <span class="red">"操作成功"</span>,
          "score": <span class="red">"83.72%"</span>,
          "success": <span class="red">"True"</span>
        }</pre>
    </div>
  </div>

</template>

<script>
export default {
  data () {
    return {
      data: [
        {
          1: 'authorization',
          2: 'Bearer token',
          3: '是',
          4: '认证token'
        },
        {
          1: 'Content-Type',
          2: 'multipart/form-data',
          3: '是',
          4: 'body类型'
        }
      ],
      data2: [
        {
          1: 'leftImg',
          2: 'file',
          3: '是',
          4: '',
          5: '文件'
        },
        {
          1: 'rightImg',
          2: 'file',
          3: '是',
          4: '',
          5: '文件'
        }
      ],
      columns: [
        {
          title: '参数名称',
          dataIndex: '1'
        },
        {
          title: '参数值',
          dataIndex: '2'
        },
        {
          title: '是否必须',
          dataIndex: '3'
        },
        {
          title: '示例',
          dataIndex: '4'
        },
        {
          title: '备注',
          dataIndex: '5'
        }
      ],
      columns2: [
        {
          title: '参数名称',
          dataIndex: '1'
        },
        {
          title: '参数类型',
          dataIndex: '2'
        },
        {
          title: '是否必须',
          dataIndex: '3'
        },
        {
          title: '示例',
          dataIndex: '4'
        },

        {
          title: '备注',
          dataIndex: '5'
        }
      ],
      columns3: [
        {
          title: '返回字段',
          dataIndex: '1'
        },
        {
          title: '字段类型',
          dataIndex: '2'
        },
        {
          title: '字段含义',
          dataIndex: '3'
        }
      ],
      data3: [
        {
          1: 'msg',
          2: 'string',
          3: '结果描述'
        },
        {
          1: 'code',
          2: 'int',
          3: '状态码'
        },

        {
          1: 'score',
          2: 'string',
          3: '匹配度'
        },
        {
          1: 'success',
          2: 'string',
          3: '请求是否成功'
        }

      ]
    }
  }
}
</script>

<style lang="less" scoped>
@import "../document_style.less";
</style>
<template>
  <div class="contentTxt">
    <h1 class="underline">人脸搜索</h1>

    <h2>接口描述</h2>

    <p>人脸搜索API在给定一张人脸照片的情况下，对比人脸库中N张人脸，进行1：N对比检索，找出最相似的一张或多张人脸。</p>

    <h2>图片要求</h2>

    <p>1. 图片格式：PNG、JPG、JPEG、BMP</p>
    <p>2. 图片大小：小于4M</p>

    <h2 class="underline">受检查图片上传</h2>
    <h2>基本信息</h2>

    <p>
      <i>Path：</i>http://apigw.deepblueai.com/api/aiplatform_web/apiCloud/face/recognition/checked</p>

    <p>
      <i>Method：</i> POST</p>

    <h2>请求参数</h2>
    <p>
      <i>Headers</i>
    </p>
    <a-table :row-key="(r,i)=>{return Math.random()}" :columns="columns" :data-source="data"></a-table>

    <p>
      <i>Body</i>
    </p>
    <a-table :row-key="(r,i)=>{return Math.random()}" :columns="columns2" :data-source="data2"></a-table>

    <h2>返回数据</h2>
    <a-table :defaultExpandAllRows="true" :row-key="(r,i)=>{return Math.random()}" :columns="columns3" :data-source="data3" :pagination={pageSize:20}></a-table>

    <h2>返回报文示例</h2>

    <div class="code">
      <pre>
        {
          "code": 200,
          "msg": "成功",
          "data": "/9j/4AAQSkZJRgABAQAAAQABAAD..."
        }</pre>
    </div>

    <h2 class="underline">开始人脸搜索</h2>
    <h2>基本信息</h2>

    <p>
      <i>Path：</i>/aiplatform_web/bodyrecognition/face/recognition/startup</p>

    <p>
      <i>Method：</i> POST</p>

    <h2>请求参数</h2>
    <p>
      <i>Headers</i>
    </p>
    <a-table :row-key="(r,i)=>{return Math.random()}" :columns="columns" :data-source="data"></a-table>

    <p>
      <i>Body</i>
    </p>
    <a-table :row-key="(r,i)=>{return Math.random()}" :columns="columns2" :data-source="data22"></a-table>

    <h2>返回数据</h2>
    <a-table  :defaultExpandAllRows="true" :row-key="(r,i)=>{return Math.random()}" :columns="columns3" :data-source="data3" :pagination={pageSize:20}></a-table>

    <h2>返回报文示例</h2>

    <div class="code">
      <pre>
        {
          "code": <span class="green">200</span>,
          "msg": <span class="red">"成功"</span>,
          "data": <span class="red">"/9j/4AAQSkZJRgABAQAAAQABAAD..."</span>
        }</pre>
    </div>
  </div>

</template>

<script>
export default {
  data () {
    return {
      columns: [
        {
          title: '参数名称',
          dataIndex: '1'
        },
        {
          title: '参数值',
          dataIndex: '2'
        },
        {
          title: '是否必须',
          dataIndex: '3'
        },
        {
          title: '备注',
          dataIndex: '4'
        }
      ],
      data: [
        {
          1: 'authorization',
          2: 'Bearer token',
          3: '是',
          4: '认证token'
        },
        {
          1: 'Content-Type',
          2: 'multipart/form-data',
          3: '是',
          4: 'body类型'
        }
      ],
      columns2: [
        {
          title: '参数名称',
          dataIndex: '1'
        },
        {
          title: '参数类型',
          dataIndex: '2'
        },
        {
          title: '是否必须',
          dataIndex: '3'
        },
        {
          title: '备注',
          dataIndex: '4'
        }
      ],
      data2: [
        {
          1: 'image',
          2: 'base64(去掉前缀)',
          3: '是',
          4: 'base64字符串'
        }
      ],
      columns3: [
        {
          title: '返回字段',
          dataIndex: '1'
        },
        {
          title: '字段类型',
          dataIndex: '2'
        },
        {
          title: '字段含义',
          dataIndex: '3'
        }
      ],
      data3: [
        {
          1: 'code',
          2: 'Integer',
          3: '状态编码（200成功，30001图片中未找到人, 30002图片中人数过多）'
        },
        {
          1: 'msg',
          2: 'string',
          3: '操作提示'
        },
        {
          1: 'data',
          2: 'string',
          3: '图片base64'
        }
      ],
      data22: [
        {
          1: 'checkedImg',
          2: 'string',
          3: '是',
          4: '受检查的图片base64'
        },
        {
          1: 'targetImg',
          2: 'string',
          3: '是',
          4: '目标图片base64'
        }
      ]
    }
  }
}
</script>

<style lang="less" scoped>
@import "../document_style.less";
</style>
<template>
  <div class="contentTxt">
    <h1 class="underline">人脸情绪识别</h1>

    <h2>接口描述</h2>

    <p>人脸情绪识别API可以分析并检测到人脸情绪，并返回置信度。目前主要支持高兴、伤心、平和、厌恶、愤怒、惊讶、恐惧等7种情绪检测；</p>

    <h2>图片要求</h2>

    <p>1. 图片格式：PNG、JPG、JPEG、BMP</p>
    <p>2. 图片大小：小于4M</p>

    <h2>基本信息</h2>

    <p>
      <i>Path：</i>http://apigw.deepblueai.com/api/aiplatform_web/apiCloud/face/emotion</p>

    <p>
      <i>Method：</i> POST</p>

    <h2>请求参数</h2>
    <p>
      <i>Headers</i>
    </p>
    <a-table :row-key="(r,i)=>{return Math.random()}" :columns="columns" :data-source="data"></a-table>

    <p>
      <i>Body</i>
    </p>
    <a-table :row-key="(r,i)=>{return Math.random()}" :columns="columns2" :data-source="data2"></a-table>

    <h2>返回数据</h2>
    <a-table :defaultExpandAllRows="true" :row-key="(r,i)=>{return Math.random()}" :columns="columns3" :data-source="data3" :pagination={pageSize:20}></a-table>

    <h2>返回报文示例</h2>

    <div class="code">
      <pre>
        {
          "code": <span class="green">200</span>,
          "msg": <span class="red">"Successful operation"</span>,
          "data": {
            "result": [
              {
                "confidence": <span class="red">"0.34"</span>,
                "rectangle": {
                  "top": <span class="red">"122"</span>,
                  "left": <span class="red">"472"</span>,
                  "bottom": <span class="red">"165"</span>,
                  "right": <span class="red">"506"</span>
                },
                "label": <span class="red">"开心"</span>
              }
            ],
            "img": <span class="red">"/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAgGBgcGB.."</span>
          }
        }</pre>
    </div>
  </div>

</template>

<script>
export default {
  data () {
    return {
      data: [
        {
          1: 'authorization',
          2: 'Bearer token',
          3: '是',
          4: '认证token'
        },
        {
          1: 'Content-Type',
          2: 'multipart/form-data',
          3: '是',
          4: 'body类型'
        }
      ],
      data2: [
        {
          1: 'image',
          2: 'base64(去掉前缀)',
          3: '是',
          4: 'base64字符串'
        }
      ],
      columns: [
        {
          title: '参数名称',
          dataIndex: '1'
        },
        {
          title: '参数值',
          dataIndex: '2'
        },
        {
          title: '是否必须',
          dataIndex: '3'
        },
        {
          title: '备注',
          dataIndex: '4'
        }
      ],
      columns2: [
        {
          title: '参数名称',
          dataIndex: '1'
        },
        {
          title: '参数类型',
          dataIndex: '2'
        },
        {
          title: '是否必须',
          dataIndex: '3'
        },
        {
          title: '备注',
          dataIndex: '4'
        }
      ],
      columns3: [
        {
          title: '返回字段',
          dataIndex: '1'
        },
        {
          title: '字段类型',
          dataIndex: '2'
        },
        {
          title: '字段含义',
          dataIndex: '3'
        }
      ],
      data3: [
        {
          1: 'code',
          2: 'Integer',
          3: '状态编码（200成功）'
        },
        {
          1: 'msg',
          2: 'string',
          3: '操作提示'
        },
        {
          1: 'data',
          2: 'string',
          3: '图片base64',
          children: [{
            1: 'result',
            2: 'jsonArray',
            3: '返回结果',
            children: [{
              1: 'confidence',
              2: 'string',
              3: '置信度'
            },
            {
              1: 'label',
              2: 'string',
              3: '情绪标签'
            },
            {
              1: 'rectangle',
              2: 'string',
              3: '检测框坐标',
              children: [{
                1: 'left',
                2: 'string',
                3: '左上 x'
              },
              {
                1: 'top',
                2: 'string',
                3: '左上 y'
              },
              {
                1: 'right',
                2: 'string',
                3: '右下 x'
              },
              {
                1: 'bottom',
                2: 'string',
                3: '右下 y'
              }]
            }]
          },

          {
            1: 'img',
            2: 'string',
            3: '图片base64'
          }]
        }

      ]
    }
  }
}
</script>

<style lang="less" scoped>
@import "../document_style.less";
</style>
